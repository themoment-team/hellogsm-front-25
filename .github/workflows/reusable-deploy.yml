name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment (prod or stage)'
      client_port:
        required: true
        type: string
        description: 'Client port mapping'
      admin_port:
        required: true
        type: string
        description: 'Admin port mapping'
      use_blue_green:
        required: false
        type: boolean
        default: false
        description: 'Whether to use blue-green deployment'
    secrets:
      CLIENT_ENV_FILE:
        required: true
      ADMIN_ENV_FILE:
        required: true
      BASTION_EC2_IP:
        required: true
      BASTION_EC2_PORT:
        required: true
      BASTION_EC2_USERNAME:
        required: true
      BASTION_EC2_SSH_KEY:
        required: true
      EC2_SSH_KEY_NAME:
        required: true
      EC2_USERNAME:
        required: true
      EC2_IP:
        required: true
      AWS_ECR_URL:
        required: true
      AWS_ECR_CLIENT_REPOSITORY:
        required: true
      AWS_ECR_ADMIN_REPOSITORY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Connect to Bastion EC2 (Blue-Green)
        if: inputs.use_blue_green == true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_EC2_IP }}
          port: ${{ secrets.BASTION_EC2_PORT }}
          username: ${{ secrets.BASTION_EC2_USERNAME }}
          key: ${{ secrets.BASTION_EC2_SSH_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY_NAME }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_IP }} << 'EOF'
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
            docker pull ${{ secrets.AWS_ECR_CLIENT_REPOSITORY }}:latest
            docker pull ${{ secrets.AWS_ECR_ADMIN_REPOSITORY }}:latest

            # Blue-Green deployment for client
            if [ "$(docker ps -q -f name=hello-gsm-client-blue)" ]; then
              CLIENT_NEW_COLOR=green
              CLIENT_OLD_COLOR=blue
              CLIENT_NEW_PORT=3001
              CLIENT_OLD_PORT=3000
            else
              CLIENT_NEW_COLOR=blue
              CLIENT_OLD_COLOR=green
              CLIENT_NEW_PORT=3000
              CLIENT_OLD_PORT=3001
            fi

            cat > .env.client.${{ inputs.environment }} << 'CLIENTEOF'
            ${{ secrets.CLIENT_ENV_FILE }}
            CLIENTEOF

            docker run -d --name hello-gsm-client-$CLIENT_NEW_COLOR \
              -p $CLIENT_NEW_PORT:3000 \
              --env-file .env.client.${{ inputs.environment }} \
              ${{ secrets.AWS_ECR_CLIENT_REPOSITORY }}:latest

            docker stop hello-gsm-client-$CLIENT_OLD_COLOR || true
            docker rm hello-gsm-client-$CLIENT_OLD_COLOR || true

            # Blue-Green deployment for admin
            if [ "$(docker ps -q -f name=hello-gsm-admin-blue)" ]; then
              ADMIN_NEW_COLOR=green
              ADMIN_OLD_COLOR=blue
              ADMIN_NEW_PORT=3003
              ADMIN_OLD_PORT=3002
            else
              ADMIN_NEW_COLOR=blue
              ADMIN_OLD_COLOR=green
              ADMIN_NEW_PORT=3002
              ADMIN_OLD_PORT=3003
            fi

            cat > .env.admin.${{ inputs.environment }} << 'ADMINEOF'
            ${{ secrets.ADMIN_ENV_FILE }}
            ADMINEOF

            docker run -d --name hello-gsm-admin-$ADMIN_NEW_COLOR \
              -p $ADMIN_NEW_PORT:3000 \
              --env-file .env.admin.${{ inputs.environment }} \
              ${{ secrets.AWS_ECR_ADMIN_REPOSITORY }}:latest

            docker stop hello-gsm-admin-$ADMIN_OLD_COLOR || true
            docker rm hello-gsm-admin-$ADMIN_OLD_COLOR || true

            docker image prune -a -f
            EOF

      - name: Connect to Bastion EC2 (Simple)
        if: inputs.use_blue_green == false
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_EC2_IP }}
          port: ${{ secrets.BASTION_EC2_PORT }}
          username: ${{ secrets.BASTION_EC2_USERNAME }}
          key: ${{ secrets.BASTION_EC2_SSH_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY_NAME }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_IP }} << 'EOF'
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
            docker pull ${{ secrets.AWS_ECR_CLIENT_REPOSITORY }}:latest
            docker pull ${{ secrets.AWS_ECR_ADMIN_REPOSITORY }}:latest

            # Stop and remove existing containers
            docker stop hello-${{ inputs.environment }}-client || true
            docker stop hello-${{ inputs.environment }}-admin || true
            docker rm hello-${{ inputs.environment }}-client || true
            docker rm hello-${{ inputs.environment }}-admin || true

            # Create env files
            cat > .env.client.${{ inputs.environment }} << 'CLIENTEOF'
            ${{ secrets.CLIENT_ENV_FILE }}
            CLIENTEOF

            cat > .env.admin.${{ inputs.environment }} << 'ADMINEOF'
            ${{ secrets.ADMIN_ENV_FILE }}
            ADMINEOF

            # Run new containers
            docker run -d \
              --name hello-${{ inputs.environment }}-client \
              -p ${{ inputs.client_port }}:3000 \
              --env-file .env.client.${{ inputs.environment }} \
              ${{ secrets.AWS_ECR_CLIENT_REPOSITORY }}:latest

            docker run -d \
              --name hello-${{ inputs.environment }}-admin \
              -p ${{ inputs.admin_port }}:3000 \
              --env-file .env.admin.${{ inputs.environment }} \
              ${{ secrets.AWS_ECR_ADMIN_REPOSITORY }}:latest

            docker image prune -a -f
            EOF
